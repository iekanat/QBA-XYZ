{
    "collab_server" : "",
    "contents" : "---\ntitle: \"Introduction\"\nauthor: \"Irfan Kanat\"\ndate: \"June 22, 2017\"\noutput:\n  pdf_document: default\n  html_document: default\nurlcolor: blue\n---\n\n# How I Learned to Stop Worrying and Love the R Console\n\nIn this document, we will go through a brief introduction to R console, data.frames and functions. Naturally we will be using R console for this purpose. To many, the command driven interface looks a bit intimidating, however there are good reasons to stick to it.\n\nFirst of all, command driven interface is very flexible and it is better suited for data manipulation and analysis tasks as a graphical user interface with similar functionality would be hard to navigate and harder to use. Second, a command driven interface allows scripting. In any serious data analysis task, reproducibility is a key concern. A command based analysis environment makes replication of results easier, as it is far easier to record every detail of the configuration used in scripts. Thus, if you are worried about R after seeing R console; it is time to lay your worries to rest and learn to love the R console.\n\nThroughout this document you will see two types of code blocks. First group (exact representation may vary depending on media type) is blue text in light gray boxes. Those are R commands you can type in to the R console. Second group is the black text on white background, preceded by ##. Which is the R output of said command. Below is an example.\n\n```{r}\n# This is a comment, any line starting with a # sign won't be evaluated by R.\nprint(\"Hello QBA Students\")\n```\n\nRight now, do not worry to much with syntax. We will cross that bridge when we get there. Just know that if you type in what you see, R will evaluate that command and return an output.\n\nHaving a basic knowledge of programming or comand line interface may be helpful at this stage **but it is absolutely not necessary**. There may be times when you may get confused about what is going on. Note your question and keep going, most of your questions will answer themselves as you progress. For the remaining questions, you can always ask me during review session.\n\n## Before Beginning \n\n**THIS IS IMPORTANT, I need you to repeat these steps for each module. I won't repeat the steps again.**\n\nWe will need to create a project for this Module. A project is a way to collect related data, analysis, documentation and code together in a tidy package.\n\nFrom the menu bar, create a new project for this module. Follow the steps outlined below:\n\n1. Click File\n2. Click New Project\n3. In the new project window, select New Directory. \n4. Select empty directory.\n5. Make sure you know where the project directory is. I recommend you place your project directory to a place you can easily access and remember (like Documents folder or Home folder). \n\n![](figures/newproject.png)\n\nFollowing these steps ensure we can keep building on the same work space over time.\n\n## Getting Your Feet Wet\n\nR console is quite flexible. You can use it for a number of purposes. Below are some basic algebra examples.\n\n```{r}\n5 + 1 # Addition\n5 - 9 # Substraction\n5 * 2 # Multiplication\n5 / 2 # Division\n5^3 # Cube\nlog(10) # Log...\n# Some logic\n3 == 4 # is 3 equal to 4? Notice double equal signs\n3 < 4 # is 3 less than 4?\n```\n\nAs you can see R can serve as a calculator. You can also use R for vector and matrix operations, which I won't be discussing here but if you ever set out to develop your own R packages, knowing them will be VERY helpful.\n\nAt this point you may be wondering about the [1] prepended to all the results. That is the index of the first item displayed in a row of results. Below I will ask R to output numbers from 1 to 30.\n\n```{r}\n1:30 # Sequential numbers from 1 to 30\n```\n\nAs you can see, in the second row the index shifts to [24] indicating the 24th number in the series.\n\n## Variables\n\nIf you want to save anything in the environment to use later; be it a scalar, data, results. You can use the assignment operator '<-'. Using '<-' will create a variable. \n\nThere are various variable naming conventions (camelCase, snake_case and so on) and you can use any one of them. I recommend using one consistently to prevent confusion. I learned how to code in a language where camel case was the convention. So on most days I will follow camel case. Most of my variable names will look like this: myVariable, yourVariable, theCoolVariable...\n\n```{r}\nA <- 5\n```\n\nNotice there is no output. R merely saved 5 into memory as A. So A is a shortcut (variable) for 5. We can use it in ways displayed below.\n\n```{r}\nA\nA + 2\nA * 2\n```\n\nHere it is time to point out to a feature of R console. It is case sensitive.\n\n```{r, }\n# a\n# Explanation\n\"a\" == \"A\"\n```\n\nWe can also store a vector (array of numbers) in a variable. Here I am saving numbers 1 to 10 in B.\n\n```{r}\nB <- 1:10\n```\n\nNotice the lack of output.\n\nYou can carry out arithmetic with scalars (single number) and other vectors.\n\n```{r}\nB\nB * A\nB + A\nC <- B + A # let us save B+A into a third variable C\nC\n```\n\nNice thing about vectors is you can access variables in a vector through indexes. We know C has numbers from 6 to 15. If I want to access the 3rd element of the vector I can do this as follows:\n\n```{r}\nC[3]\n```\n\nHere the number between the square braces \"[]\" is the index. It tells R to extract only the third element. **Indexing is a key point which we will use quite a bit later.**\n\nYou can also refer to more than one element at once. Below I refer to elements from second to fourth.\n\n```{r}\nC[2:4]\n```\n\nSimilarly we can refer to just 3rd and 6th elements.\n\n```{r}\nC[c(3, 6)]\n```\n\nYou can use logic operators to refer to specific elements. This will come in handy later when you are trying to extract all information before a specific date or all transactions of a customer.\n\nWe can see if elements of C are smaller than 10.\n\n```{r}\nC < 10\n```\n\nWe can use this information to extract only elements of C less than 10. Pay heed here, as we will use this in some subsetting scenarios.\n\n```{r}\nC[C < 10]\n```\n\n## Data Frames\n\nIn R data.frame is the typical storage of data. You can think of it as a matrix (two dimensional data structure) that allows different types of variables to be combined. Below I am generating a data.frame. Do not worry too much about how it works at this stage. The important part is how we will refer to elements of the data frame.\n\n```{r}\nfac <- sample(LETTERS[1:3], 10, replace = TRUE)\nD <- data.frame(1, 1:10, fac)\nD\n```\n\nAs you can see, the data frame has three variables (X1, X1.10, and fac) in columns and ten observations of each in rows. This is a two dimensional data structure. Meaning we can refer to rows and columns.\n\nLet us get the first three rows. **Notice the ',' between the square brackets. The part before the comma refers to rows, and the part after refers to columns.**\n\n```{r}\nD[1:3, ]\n```\n\nNow let us get just the second and third column.\n\n```{r}\nD[, 2:3]\n```\n\nYou can refer to rows and columns at the same time.\n\n```{r}\nD[1:3, 2:3]\n```\n\nYou can use column names to refer to columns.\n\n```{r}\nD[, \"fac\"]\n# OR Alternately notice the use of $ operator\nD$fac\n```\n\nNow think about a situation. Where the third column (fac) is the user ID and you want all transactions of a specific user. We can use the logic operators we learned about earlier to obtain just that. Let us extract the observations relating to user C .\n\n```{r}\n# This translates to \"From D, select all rows where column fac equals 'C'\". \nD[D$fac == \"C\", ]\n```\n\nI want to emphasize this example once more. This is important as it will be used often in the future to filter data.frames. Let us pay attention to what is going on by running parts of the code in isolation.\n\nWe are passing a logical operation *(D$fac=='C')* to row index. Let us see what the logical operation produces\n\n```{r}\nD$fac\nD$fac == \"C\"\n```\nIt produces a series of TRUE/FALSE values. Compare output of `D$fac` and `D$fac=='C'`, the series returns TRUE when value in fac is C.  When this series is fed into the row index, it will spit out the rows where the value of the series is TRUE.\n\n## Loops in R\n\nR can be pretty inefficient with loops, try to vectorize your operations and use apply functions instead. After that warning, here is how you loop in R.\n\n```{r}\nfor(i in C){\n  print(i)\n  }\n```\n\n\n## Functions\n\nSo now you know about assignment operators (<-, ->, =), logical operators (==, <, >, ...), variables and data.frames. Learning about functions will conclude our introduction to R console, and enable us to explore more exciting dimensions of analytics with R.\n\nA function is a set of instructions to be executed by the computer. You can think of these as shorthands for complex commands.\n\nA basic R function is just a word followed by _parentheses_. Between the brackets are the options (parameters) of the function. The function below prints R license information to the screen. It takes no parameters.\n\n```{r}\nlicense() #Source of the virus\n```\n\nIf you want to see the source code of any function, just type its name without the braces. This way you can see how existing functions work, and hopefully later debug, and develop your own functions.\n\n```{r}\nlicense\n```\n\nSome functions (the most useful ones) take parameters. Here I am asking R to calculate the mean of numbers in vector C. C serves as a parameter to tell the mean function over which numbers to calculate the mean.\n\n```{r}\nmean(C)\n```\n\nYou can directly use the output of one function with another. Here I will calculate the mean by first summing the C vector then dividing the sum by number of elements.\n\n```{r}\nsum(C) / length(C)\n```\n\nFunctions can take more than one parameter. Here I am instructing R to calculate mean, after trimming the extreme values (10% of the data).\n\n```{r}\nmean(C, trim = .10)\n```\n\nIf you want to learn what a function does, or what parameters are available, use help function.\n\n```{r}\nhelp(mean)\n```\n\nYou can also create your own functions by saving them in a variable. Below I declare a hello function that takes a string, or number and prints out a hello message.\n\n```{r}\n# Declare function\nhello <- function(x){\n  print( paste(\"Hello \", x) )\n  }\n# Use function\nhello(\"MSBA\")\n# View source\nhello\n```\n\nHere I declare two parameters with the default value of the second parameter set to 1.\n\n```{r}\nhello <- function(x, y = 1){\n  for(i in 1:y){\n    print( paste(\"Hello \", x) )\n    }\n}\n\nhello(\"World\")\n\nhello(\"World\", 3)\n```\n\n\nWe will learn about more useful functions as we continue the course.\n\nThis concludes our introduction to R Console.\n\n------\n\n![Creative Commons 4](figures/cc.png) How I Learned to Stop Worrying and Love the R Console by [Irfan E Kanat](http://irfankanat.com) is licensed under a [Creative Commons Attribution 4.0 International License](http://creativecommons.org/licenses/by/4.0/). Based on a work at [http://github.com/iekanat/rworkshop](http://github.com/iekanat/rworkshop).",
    "created" : 1498488107753.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4082750241",
    "id" : "51F482A3",
    "lastKnownWriteTime" : 1503944253,
    "last_content_update" : 1506969756396,
    "path" : "~/Dropbox/QBAXXXX/R Content/Module 1 - Introduction/3_Introduction.Rmd",
    "project_path" : "3_Introduction.Rmd",
    "properties" : {
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}