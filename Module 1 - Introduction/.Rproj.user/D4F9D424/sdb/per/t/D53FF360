{
    "collab_server" : "",
    "contents" : "---\ntitle: \"Importing Data\"\nauthor: \"Irfan Kanat\"\ndate: \"June 26, 2017\"\noutput:\n  pdf_document: default\n  html_document: default\nurlcolor: blue\n---\n\n\nIn this learning activity I will try to walk you through the most common data import functions. Once you learn the basics, you can use the same principles to any type of analysis task at hand.\n\n\n## Before Beginning\n\n*Make sure you are using the same project as we did in the introduction.* Copy the files in the zip file provided to your project directory.\n\n\n## Comma Separated Value (CSV) Files\n\nThis is the most common file format there is to transfer data, with good reason I might add. It is human readable (not binary), and is compatible with almost any system out there. The basic idea is, the columns are separated by commas and observations are separated by new lines. I would recommend you use this format unless you have compelling reason to do otherwise.\n\nR uses read.csv function (remember the Introduction to R Console learning activity) to import this file type. But first, let us learn more about this function (by using the help function).\n\n```{r}\nhelp(read.csv)\n```\n\nAs you can see, the function takes quite a few parameters but most are optional with reasonable defaults (meaning you can safely leave them blank).\n\nYou are provided with a [file](country.csv) named \"country.csv\" in the course repository. If you placed this file in your project directory you can import its contents as follows.\n\n```{r,results='hide'}\n# Save file contents into a variable called csv\ncsv <- read.csv(\"country.csv\")\n# view the contents (Output omited here to save space)\ncsv\n```\n\nTo view the contents of this new variable in a spreadsheet format, double click the csv in Environment pane of R studio (Area B), or write the command below.\n\n```{r}\nView(csv) # we utilize View function to display results in R Studio\n```\n\nYou can also explore the file contents via R functions.\n\n```{r}\nstr(csv) # Structure\nsummary(csv) # Descriptive Statistics\n```\n\nTo export data in csv format, you can use write.csv() function.\n\nInspect manual entry for the command.\n\n```{r}\n?write.csv\nwrite.csv(csv, file = \"data/countryExp.csv\")\n```\n\n## Excel Files\n\nThis file format is very common due to the popularity of Microsoft's office suite. \n\nTo import this file type we need two additional steps, installing and loading packages (covered in Packages and Package Management activity).\n\n```{r}\n# Below is commented out, since I do not want R to install package every time you run this.\n# Uncomment the line (by deleting the hash sign) the first time and run.\n#install.packages(\"readxl\") # Install the readxl package that enables xlsx import function.\nlibrary(readxl) # Enable the package\n```\n\nNow let us read the [xlsx file](country.xlsx) into R. Note that I had to specify which worksheet to import.\n\n```{r}\nxlsx <- read_excel(\"country.xlsx\") # Import the file\nxlsx # view contents\n```\n\nThe package has other functionality that you can discover on your own (use help function).\n\n## Databases\n\nR can connect to a variety of databases. For this workshop we currently do not have access to a database to demonstrate this functionality. Below is an example for MySQL.\n\n```{r, eval=FALSE}\nlibrary(RMySQL) # Load the necessary package\n# Establish database connection\nchannel <- dbConnect(MySQL(), user = \"uname\", password = \"pwd\",\n                     host = \"127.0.01\", dbname=\"exampledata\")\n# Execute query over connection, save results\nsql <- dbGetQuery(channel, \"SELECT * FROM table;\")\n```\n\n## Other Statistical Packages\n\nR enables importing data from other statistical packages as well. I would recommend exporting the data from other packages in a csv and then importing it that way to minimize incompatibilities. If you have no access to the offending statistical package, then you can easily use one of the packages listed below.\n\nI won't go into details as this may well turn out to be a fringe case not useful to all. For the purposes of this course, I will only discuss the packages and functions used and not actually import any data. You can use the principles used in earlier steps to import data on your own.\n\n### SAS\n\nPackage used for sas data format after version 7 is valled 'sas7bdat'. The function used is called read.sas7bdat().\n\nIf you have exported the data from SAS, you can use 'foreign' package with read.xport() function.\n\n### STATA\n\nStata data format has changed after version 13. If you wish to import a file of this sort use 'readstata13' package with read.dta13() function.\n\nEarlier versions can be imported with 'foreign' package's read.dta() function.\n\n### SPSS\n\nSPSS sav files can be imported with 'foreign' package's read.spss() function.\n\nExported por files can be imported with 'Hmisc' package's spss.get() function.\n\n------\n\n![Creative Commons 4](figures/cc.png) How I Learned to Stop Worrying and Love the R Console by [Irfan E Kanat](http://irfankanat.com) is licensed under a [Creative Commons Attribution 4.0 International License](http://creativecommons.org/licenses/by/4.0/). Based on a work at [http://github.com/iekanat/rworkshop](http://github.com/iekanat/rworkshop).",
    "created" : 1498493287074.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1732536755",
    "id" : "D53FF360",
    "lastKnownWriteTime" : 1503405952,
    "last_content_update" : 1503405952462,
    "path" : "~/Dropbox/QBAXXXX/R Content/Module 1 - Introduction/5_Import.Rmd",
    "project_path" : "5_Import.Rmd",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 6,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}