data(mtcars)
library(ggplot2)
plotContinuous <- qplot(mtcars$mpg)
plotContinuous
plotBinary <- qplot(mtcars$am)
plotBinary
mtcars
summary(mtcars)
plotContinuous <- qplot(mtcars$wt)
plotContinuous
plotContinuous <- qplot(mtcars$disp)
plotContinuous
plotContinuous <- qplot(mtcars$drat)
plotContinuous
plotContinuous <- qplot(mtcars$qsec)
plotContinuous
plotContinuous <- qplot(mtcars$vs)
plotContinuous
plotContinuous <- qplot(mtcars$mpg)
plotContinuous
data(mtcars)
library(ggplot2)
library(gridExtra)
grid.arrange(plotBinary, plotContinuous)
grid.arrange(plotBinary, plotContinuous, ncol=1)
data(mtcars)
library(ggplot2)
install.packages(c("ggplot2", "gridExtra", "caret", "pROC", "plotROC"))
data(mtcars)
data(mtcars)
library(ggplot2)
library(gridExtra)
library(plotROC)
library(caret)
library(pROC)
install.packages("plotROC")
# Or use the plot function to plot the curve
#plot(mtcars_am_roc)
# Ggplot with plotROC package does a better job.
ggplot(mtcars, aes(d=am, m=prob))+ geom_roc() + style_roc()
library(ggplot2)
install.packages("plotROC")
install.packages("plotROC")
library(plotROC)
# Or use the plot function to plot the curve
#plot(mtcars_am_roc)
# Ggplot with plotROC package does a better job.
ggplot(mtcars, aes(d=am, m=prob))+ geom_roc() + style_roc()
install.packages("nnet")
install.packages("nnet")
install.packages("mlogit")
# Read in csv file
games <- read.csv("data/games.csv")
library(mlogit)
?mlogit
mlogit(Status~Users, data=games)
mlogit(Status~Users, data=games, choice=Status)
mlogit(Status~Users, data=games, choice=Status, shape=longley)
mlogit(Status~Users, data=games, choice="Status", shape="long")
mlogit(Status~0|Users, data=games)
mlogit(Status~0|Users, data=games, choice="Status")
mlogit(Status~0|Users, data=games, choice="Status", shape="long")
mlogit(Status~0|Users, data=games, choice="Status", shape="wide")
summary(mlogit(Status~0|Users, data=games, choice="Status", shape="wide"))
library(nnet)
summary(multinom(Status~Users, games))
exp(.197)
Gdat<-read.csv("data/GamesData.csv")
Gdat<-Gdat[,c("AppID", "multi")]
games <- merge(games, Gdat)
View(games)
write.csv(games, file="data/games.csv", row.names = F)
rm(Gdat)
rm(games)
games <- read.csv("data/games.csv")
summary(multinom(Status~Users+multi, games))
summary(mlogit(Status~0|Users+multi, data=games, choice="Status", shape="wide"))
summary(mlogit(Status~0|AvgMin+multi, data=games, choice="Status", shape="wide"))
summary(multinom(Status~AvgMin+multi, games))
summary(multinom(Status~AvgMin+ListPrice, games))
summary(mlogit(Status~0|AvgMin+ListPrice, data=games, choice="Status", shape="wide"))
summary(mlogit(Status~0|AvgMin+MaxUsers, data=games, choice="Status", shape="wide"))
summary(multinom(Status~AvgMin+multi, games))
summary(mlogit(Status~0|AvgMin+multi, data=games, choice="Status", shape="wide"))
summary(mlogit(Status~0|AvgMin+Users+multi, data=games, choice="Status", shape="wide"))
summary(mlogit(Status~0|AvgMin+multi, data=games, choice="Status", shape="wide"))
# Read in csv file
games <- read.csv("data/games.csv")
# Inspect Structure of the variables
str(games)
# Inspect descriptives
summary(games)
summary(mlogit(Status~0|AvgMin+multi, data=games, choice="Status", shape="wide"))
summary(mlogit(status~0|avgMin+multi, data=games, choice="status", shape="wide"))
summary(multinom(Status~AvgMin+multi, games))
summary(multinom(status~avgMin+multi, games))
games_mlgt_0 <- mlogit(status ~ 0 | avgMin + multi, data = games, choice = "status", shape = "wide")
summary(games_mlgt_0)
mtcars_lgt_0$null.deviance
mtcars_lgt_0 <- glm(am ~ mpg + vs , mtcars, family = "binomial")
mtcars_lgt_0$null.deviance
mtcars_lgt_0$deviance
mtcars_lgt_0$null.deviance - mtcars_lgt_0$deviance
mtcars_lgt_0$null.deviance - mtcars_lgt_0$deviance
mtcars_lgt_0$deviance
mtcars_lgt_0$null.deviance
(mtcars_lgt_0$null.deviance - mtcars_lgt_0$deviance)
mtcars_lgt_0$df.null
mtcars_lgt_0$df.residual
mtcars_lgt_0$df.null - mtcars_lgt_0$df.residual
mtcars_lgt_0$df.null - mtcars_lgt_0$df.residual
games_mlgt_0
coefficients(games_mlgt_0)
coefficients(games_mlgt_0)[1]
coefficients(games_mlgt_0)[2]
coefficients(games_mlgt_0)[3]
exp(coefficients(games_mlgt_0)[3])
exp(coef(games_mlgt_0))[3]
exp(coef(games_mlgt_0)[3]*10)
predict(games_mlgt_0)
gtmp <- games[1,]
gtmp[1,]
gtmp$avgMin<-mean(games$avgMin)
gtmp
predict(games_mlgt_0, newdata = gtmp)
gtmp[2, ]<-gtmp[1,]
gtmp[3,]<-gtmp[1m]
gtmp[3,]<-gtmp[1,]
predict(games_mlgt_0, newdata = gtmp)
gtmp$avgMin<-2*mean(games$avgMin)
predict(games_mlgt_0, newdata = gtmp)
gtmp$avgMin<-3*mean(games$avgMin)
predict(games_mlgt_0, newdata = gtmp)
gtmp[3:6,]<-gtmp
gtmp[3:5,]<-gtmp
gtmp[3:5,"avgMin"]<-mean(games$avgMin)
gtmp[6:8,]<-gtmp[1:3,]
gtmp[6:8,"avgMin"]<-mean(games$avgMin)/4
predict(games_mlgt_0, newdata = gtmp)
gtmp
gtmp[1:9, ] <- games[1,]
gtmp[1:3, "avgMin"] <- mean(games$avgMin) / 2
gtmp[4:6, "avgMin"] <- mean(games$avgMin)
gtmp[7:9, "avgMin"] <- mean(games$avgMin) * 2
predict(games_mlgt_0, gtmp)
install.packages("e1071")
rm(gtmp)
data(mtcars)
library(ggplot2)
library(gridExtra)
library(caret)
library(pROC)
library(plotROC)
library(mlogit)
gtmp[1:9, ] <- games[1,]
gtmp<-games[1,]
gtmp[1:9, ] <- games[1,]
gtmp[1:3, "avgMin"] <- mean(games$avgMin) / 2
gtmp[4:6, "avgMin"] <- mean(games$avgMin)
gtmp[7:9, "avgMin"] <- mean(games$avgMin) * 2
# Let us look at the data we created
gtmp
