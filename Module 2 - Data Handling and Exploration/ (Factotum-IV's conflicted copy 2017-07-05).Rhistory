p1 <- ggplot(data=bagsOfApples, aes(weight)) +
xlim(0,4) +
geom_histogram(bins = 10) +
geom_vline(data=bagsOfApples, aes(xintercept=mean(weight)), linetype="dashed", colour="blue") +
geom_density(alpha=.2, fill="red") +
theme_bw()
p2 <- ggplot(data=bagsOfOranges, aes(weight)) +
xlim(0,4) +
geom_histogram(bins = 10) +
geom_vline(data=bagsOfOranges, aes(xintercept=mean(weight)), linetype="dashed", colour="blue") +
geom_density(alpha=.2, fill="red") +
theme_bw()
grid.arrange(p1, p2)
p1 <- ggplot(data=bagsOfApples, aes(weight)) +
xlim(0,4) +
geom_histogram() +
geom_vline(data=bagsOfApples, aes(xintercept=mean(weight)), linetype="dashed", colour="blue") +
geom_density(alpha=.2, fill="red") +
theme_bw()
p2 <- ggplot(data=bagsOfOranges, aes(weight)) +
xlim(0,4) +
geom_histogram() +
geom_vline(data=bagsOfOranges, aes(xintercept=mean(weight)), linetype="dashed", colour="blue") +
geom_density(alpha=.2, fill="red") +
theme_bw()
grid.arrange(p1, p2)
p1 <- ggplot(data=bagsOfApples, aes(weight)) +
xlim(0,4) +
geom_histogram(binwidth = .1) +
geom_vline(data=bagsOfApples, aes(xintercept=mean(weight)), linetype="dashed", colour="blue") +
geom_density(alpha=.2, fill="red") +
theme_bw()
p2 <- ggplot(data=bagsOfOranges, aes(weight)) +
xlim(0,4) +
geom_histogram(binwidth = .1) +
geom_vline(data=bagsOfOranges, aes(xintercept=mean(weight)), linetype="dashed", colour="blue") +
geom_density(alpha=.2, fill="red") +
theme_bw()
grid.arrange(p1, p2)
p1 <- ggplot(data=bagsOfApples, aes(weight)) +
xlim(0,4) +
title("Apples") +
geom_histogram(binwidth = .1) +
geom_vline(data=bagsOfApples, aes(xintercept=mean(weight)), linetype="dashed", colour="blue") +
geom_density(alpha=.2, fill="red") +
theme_bw()
p1 <- ggplot(data=bagsOfApples, aes(weight)) +
xlim(0,4) +
ggtitle("Apples") +
geom_histogram(binwidth = .1) +
geom_vline(data=bagsOfApples, aes(xintercept=mean(weight)), linetype="dashed", colour="blue") +
geom_density(alpha=.2, fill="red") +
theme_bw()
p2 <- ggplot(data=bagsOfOranges, aes(weight)) +
xlim(0,4) +
ggtitle("Oranges") +
geom_histogram(binwidth = .1) +
geom_vline(data=bagsOfOranges, aes(xintercept=mean(weight)), linetype="dashed", colour="blue") +
geom_density(alpha=.2, fill="red") +
theme_bw()
grid.arrange(p1, p2)
p1 <- ggplot(data=bagsOfApples, aes(weight)) +
xlim(0,4) +
ylim(0,13) +
ggtitle("Apples") +
geom_histogram(binwidth = .1) +
geom_vline(data=bagsOfApples, aes(xintercept=mean(weight)), linetype="dashed", colour="blue") +
geom_density(alpha=.2, fill="red") +
theme_bw()
p2 <- ggplot(data=bagsOfOranges, aes(weight)) +
xlim(0,4) +
ylim(0,13) +
ggtitle("Oranges") +
geom_histogram(binwidth = .1) +
geom_vline(data=bagsOfOranges, aes(xintercept=mean(weight)), linetype="dashed", colour="blue") +
geom_density(alpha=.2, fill="red") +
theme_bw()
grid.arrange(p1, p2)
?sd
mode(bagsOfApples$weight)
?mode
mod
median(bagsOfApples$weight)
mean(bagsOfApples$weight)
?summary
summary(mtcars)
describe(mtcars)
library(psych)
describe(mtcars)
describe(bagsOfApples)
describe(bagsOfOranges)
cor(mtcars[,1:4])
?mtcars
table(mtcars$gear)
table(mtcars[,c("am","cyl")])
table(mtcars$gear)
qplot(factor(gear), data=mtcars, geom="bar") # used factor to declare categorical
table(mtcars[,c("am","gear")])
table(mtcars[,c("am","gear")])
data(mtcars)
qplot(factor(gear), data=mtcars,  fill=factor(am), geom="bar") # used factor to declare categorical
qplot(weight, data=bagsOfOranges, geom="bar")
qplot(weight, data=bagsOfOranges, geom="hist")
qplot(weight, data=bagsOfOranges, geom="bar", bins=5)
qplot(weight, data=bagsOfOranges, geom="histogram")
qplot(weight, data=bagsOfOranges, geom="histogram", binwidth=.5)
qplot(weight, data=bagsOfOranges, geom="histogram", binwidth=.1)
qplot(weight, data=bagsOfOranges, geom="histogram", binwidth=.05)
1
qplot(weight, data=bagsOfOranges, geom="histogram", binwidth=.1)
qplot(factor(gear), data=mtcars, geom="histogram") # used factor to declare categorical
qplot(factor(gear), data=mtcars, geom="bar") # used factor to declare categorical
qplot(hp, data=mtcars, geom="bar", fill=factor(cylinders))
qplot(hp, data=mtcars, geom="bar", fill=factor(cyl))
qplot(hp, data=mtcars, geom="bar", fill=factor(cyl), stat="mean")
qplot(factor(cyl), data=mtcars, geom="bar", fill=hp, stat="mean")
qplot(x=factor(cyl), y=hp , data=mtcars, geom="bar", stat="mean")
qplot(x=factor(cyl), y=hp , data=mtcars, geom="bar")
qplot
?qplot
qplot(x=factor(cyl), y=hp , data=mtcars)
ggplot(data=mtcars, aes(x=factor(cyl), y=hp)) + geom_bar()
ggplot(data=mtcars, aes(x=factor(cyl), y=hp)) + stat_summary(fun.y="mean", geom="bar")
aggregate(hp~cyl, data=mtcars)
aggregate(hp~cyl, data=mtcars, fun="mean")
aggregate(hp~cyl, data=mtcars, fun=mean)
aggregate(hp~cyl, data=mtcars, mean)
aggregate(hp~cyl, data=mtcars, FUN = mean)
?stat_summary
?aes
qplot(x=weight, data=bagsOfOranges, geom="histogram", binwidth=.1)
library(ggplot2)
qplot(x=weight, data=bagsOfOranges, geom="histogram", binwidth=.1)
knit_with_parameters('~/Dropbox/QBAXXXX/R Content/Week 2 - Data Handling and Exploration/2_Visualization.Rmd')
write.csv(bagsOfApples, file="data/bagsOfApples.csv", row.names = F)
write.csv(bagsOfOranges, file="data/bagsOfOranges.csv", row.names = F)
write.csv(bagsOfApples, file="data/bagsOfApples.csv", row.names = F)
write.csv(bagsOfOranges, file="data/bagsOfOranges.csv", row.names = F)
bagsOfApples<-read.csv(file = "data/bagsOfApples.csv")
bagsOfOranges<-read.csv(file = "data/bagsOfOranges.csv")
View(mtcars)
View(bagsOfOranges)
View(bagsOfApples)
ggplot(data=mtcars, aes(x=factor(cyl), y=hp)) + stat_summary(fun.y="mean", geom="bar")
?stat_summary
?mtcars
ggplot(data=mtcars, aes(x=factor(cyl), y=hp)) + # Initialize the plot, map variables
stat_summary(fun.y="mean", geom="bar") + # Specify transformations to variables
ggtitle("Average Horse Power by Number of Cylinders") + # Title of the plot
xlab("Number of Cylinders") + # X label
ylab("Gross Horse Power") # Y label
ggplot(data=mtcars, aes(x=factor(cyl), y=hp)) + # Initialize the plot, map variables
stat_summary(fun.y="mean", geom="bar") + # Specify transformations to variables
ggtitle("Average Horse Power by Number of Cylinders") + # Title of the plot
xlab("Number of Cylinders") + # X label
ylab("Gross Horse Power") + # Y label
theme_minimal()
qplot(hp, mpg, data=mtcars, color=factor(cyl), alpha=.5)
?aes
qplot(hp, mpg, data=mtcars, color=factor(cyl), shape=factor(cyl), alpha=.5)
qplot(hp, mpg, data=mtcars, color=factor(cyl), size=disp, alpha=.08)
qplot(x=weight, data=bagsOfOranges, geom="histogram", binwidth=.1)
qplot(hp, mpg, data=mtcars) +
geom_smooth(method=lm, sd=F)
ggplot(mtcars, aes(factor(gear))) +
# Instruct ggplot to plot bars of width .3
geom_bar(stat = "bin", width=0.3) +
ggtitle('GGPlot is Highly Customizable') +
xlab('Forward Gears') +
ylab('Nr of Cars')
ggplot(mtcars, aes(factor(gear))) +
# Instruct ggplot to plot bars of width .3
geom_bar(width=0.3) +
ggtitle('GGPlot is Highly Customizable') +
xlab('Forward Gears') +
ylab('Nr of Cars')
ggplot(mtcars, aes(factor(gear))) +
# Instruct ggplot to plot bars of width .3
geom_bar(width=0.3) +
ggtitle('GGPlot is Highly Customizable') +
xlab('Forward Gears') +
ylab('Nr of Cars') +
theme_bw()
ggplot(mtcars, aes(x=hp, y=mpg)) +
geom_point(aes(color=factor(cyl), size=disp)) + # For scatter plot
geom_smooth(method=lm) + # Add a regression line
ggtitle('GGPlot FTW!') # Add a title
ggplot(bagsOfApples, aes(x=weight))
ggplot(bagsOfApples, aes(x=weight)) +
# Instruct ggplot to plot bars of width .3
geom_histogram(binwidth=0.1) +
ggtitle('GGPlot is Highly Customizable') +
xlab('Forward Gears') +
ylab('Nr of Cars') +
theme_bw()
ggplot(bagsOfApples, aes(x=weight)) +
# Instruct ggplot to plot bars of width .3
geom_histogram(binwidth=0.1) +
ggtitle('GGPlot is Highly Customizable') +
xlab('Weight') +
theme_bw()
ggplot(bagsOfApples, aes(x=weight)) +
# Instruct ggplot to plot bars of width .3
geom_histogram(binwidth=0.01) +
ggtitle('GGPlot is Highly Customizable') +
xlab('Weight') +
theme_bw()
ggplot(bagsOfApples, aes(x=weight)) +
# Instruct ggplot to plot bars of width .3
geom_histogram(binwidth=0.03) +
ggtitle('GGPlot is Highly Customizable') +
xlab('Weight') +
theme_bw()
ggplot(bagsOfApples, aes(x=weight)) +
# Instruct ggplot to plot bars of width .3
geom_histogram(binwidth=0.04) +
ggtitle('GGPlot is Highly Customizable') +
xlab('Weight') +
theme_bw()
ggplot(bagsOfApples, aes(x=weight)) +
# Instruct ggplot to plot bars of width .3
geom_histogram(binwidth=0.05) +
ggtitle('GGPlot is Highly Customizable') +
xlab('Weight') +
theme_bw()
ggplot(bagsOfApples, aes(x=weight)) +
# Instruct ggplot to plot bars of width .3
geom_histogram(binwidth=0.07) +
ggtitle('GGPlot is Highly Customizable') +
xlab('Weight') +
theme_bw()
ggplot(bagsOfApples, aes(x=weight)) +
# Instruct ggplot to plot bars of width .3
geom_histogram(binwidth=0.1) +
ggtitle('GGPlot is Highly Customizable') +
xlab('Weight') +
theme_bw()
ggplot(bagsOfApples, aes(x=weight)) +
# Instruct ggplot to plot bars of width .3
geom_histogram(binwidth=0.2) +
ggtitle('GGPlot is Highly Customizable') +
xlab('Weight') +
theme_bw()
ggplot(bagsOfApples, aes(x=weight)) +
# Instruct ggplot to plot bars of width .3
geom_histogram(binwidth=0.3) +
ggtitle('GGPlot is Highly Customizable') +
xlab('Weight') +
theme_bw()
ggplot(bagsOfApples, aes(x=weight)) +
# Instruct ggplot to plot bars of width .3
geom_histogram(binwidth=0.25) +
ggtitle('GGPlot is Highly Customizable') +
xlab('Weight') +
theme_bw()
ggplot(bagsOfApples, aes(x=weight)) +
# Instruct ggplot to plot bin width (range) of .3
geom_histogram(binwidth=0.25) +
ggtitle('Distribution of Weight of Apples') +
xlab('Weight') +
theme_bw()
rep(2012:2017)
rep(2012:2017, 3)
rep(A:B, 5)
rep(LETTERS[1:3], 5)
seq(LETTERS[1:3], 5)
seq(LETTERS[1:3])
LETTERS[1:3]
seq(A, C, each=5)
seq(A:C, each=5)
seq(LETTERS[1:3], each=5)
rep(LETTERS[1:3], each=5)
seq(100:110)+rnorm(5, mean = 0, sd=2)
seq(from=100, to=110, by=2)+rnorm(5, mean = 0, sd=2)
seq(from=100, to=110, by=2)
seq(from=102, to=110, by=2)+rnorm(5, mean = 0, sd=2)
ROI<-data.frame(company=rep(LETTERS[1:3], each=5), year=rep(2013:2017, 3), profit=c((seq(from=102, to=110, by=2)+rnorm(5, mean = 0, sd=2), (rep(50, 5)+rnorm(5, mean = 0, sd=1)),(seq(from=70, to=90, by=4)+rnorm(5, mean = 0, sd=2)))))
ROI<-data.frame(company=rep(LETTERS[1:3], each=5), year=rep(2013:2017, 3), profit=c((seq(from=102, to=110, by=2)+rnorm(5, mean = 0, sd=2)), (rep(50, 5)+rnorm(5, mean = 0, sd=1)),(seq(from=70, to=90, by=4)+rnorm(5, mean = 0, sd=2))))
rep(50, 5)
seq(70, 90, by=4)
seq(70, 90, by=5)
ROI<-data.frame(company=rep(LETTERS[1:3], each=5), year=rep(2013:2017, 3), profit=c((seq(from=102, to=110, by=2)+rnorm(5, mean = 0, sd=2)), (rep(50, 5)+rnorm(5, mean = 0, sd=1)),(seq(from=70, to=90, by=5)+rnorm(5, mean = 0, sd=2))))
set.seed(2017)
ROI<-data.frame(company=rep(LETTERS[1:3], each=5), year=rep(2013:2017, 3), profit=c((seq(from=102, to=110, by=2)+rnorm(5, mean = 0, sd=2)), (rep(50, 5)+rnorm(5, mean = 0, sd=1)),(seq(from=70, to=90, by=5)+rnorm(5, mean = 0, sd=2))))
set.seed(2017) # Set seed for random number generator for replicability
profits<-data.frame(company=rep(LETTERS[1:3], each=5), year=rep(2013:2017, 3), profit=c((seq(from=102, to=110, by=2)+rnorm(5, mean = 0, sd=2)), (rep(50, 5)+rnorm(5, mean = 0, sd=1)),(seq(from=70, to=90, by=5)+rnorm(5, mean = 0, sd=2))))
rm(ROI)
write.csv(profits, file="data/profits.csv")
view(profits)
View(profits)
qplot(data=profits, x=year, y=profit, color=company, geom="line")
ggplot(data=profits, aes(x=year, y=profit, color=company)) +
geom_line()
ggplot(data=profits, aes(x=year, y=profit, color=company)) +
geom_line() +
xlim(0, 120)
ggplot(data=profits, aes(x=year, y=profit, color=company)) +
geom_line() +
ylim(0, 120)
ggplot(data=profits, aes(x=year, y=profit, color=company)) +
geom_line() +
ylim(65, 90)
ggplot(data=profits, aes(x=year, y=profit, color=company)) +
geom_line() +
ylim(70, 90)
ggplot(data=profits, aes(x=year, y=profit, color=company)) +
geom_line() +
ylim(70, 95)
ggplot(data=profits, aes(x=year, y=profit, color=company)) +
geom_line() +
ylim(70, 90)
qplot(hp, mpg, data=mtcars, color=factor(cyl), shape=factor(cyl))
qplot(hp, mpg, data=mtcars, color=factor(cyl), shape=factor(cyl), alpha=.5)
qplot(data=profits, x=year, y=profit, color=company, geom="line", lty=1:3)
qplot(data=profits, x=year, y=profit, color=company, geom="line", lty=company)
qplot(data=profits, x=year, y=profit, color=company, linetype=company, geom="line")
qplot(data=profits, x=year, y=profit, color=company, linetype=company, geom="line")
ggplot(mtcars, aes(x=hp, y=mpg)) +
geom_point(aes(color=factor(cyl), size=disp)) + # For scatter plot
geom_smooth(method=lm) + # Add a regression line
ggtitle('GGPlot FTW!') # Add a title
grid.arrange(p1, p2)
library(gridExtra) # The library to put two panels with plots together
grid.arrange(p1, p2)
t.test(bagsOfApples$weight, bagsOfOranges$weight)
set.seed(2017) # Setting the seed for random number generator so that examples stay consistent.
bagsOfOranges<-data.frame(bagNo=1:30, weight=rnorm(30, mean = 1.9, sd=.1)) # Create a data frame
bagsOfApples<-data.frame(bagNo=1:30, weight=rnorm(30, mean = 2.1, sd=.5)) # Create a data frame
mean(bagsOfApples$weight)
mean(bagsOfOranges$weight)
t.test(bagsOfApples$weight, bagsOfOranges$weight)
p1 <- ggplot(data=bagsOfApples, aes(weight)) + # initialize a plot for data
xlim(0,4) + # Set the limits of x axis to keep plots comparable
ylim(0,13) + # Set the limits of y axis to keep plots comparable
ggtitle("Apples") + # Set the title to be able to identify plots
geom_histogram(binwidth = .1) + # Set the type of plot as a histogram
# Add the mean into the plot as a blue dashed line
geom_vline(data=bagsOfApples, aes(xintercept=mean(weight)), linetype="dashed", colour="blue") +
geom_density(alpha=.2, fill="red") + # Overlay density plot to show distribution
theme_bw() # Make it look good
p2 <- ggplot(data=bagsOfOranges, aes(weight)) + # initialize a plot for data
xlim(0,4) + # Set the limits of x axis to keep plots comparable
ylim(0,13) + # Set the limits of y axis to keep plots comparable
ggtitle("Oranges") + # Set the title to be able to identify plots
geom_histogram(binwidth = .1) +  # Set the type as histogram
# Add the mean into plot as a blue dashed line
geom_vline(data=bagsOfOranges, aes(xintercept=mean(weight)), linetype="dashed", colour="blue") +
geom_density(alpha=.2, fill="red") + # Overlay density plot to show distribution
theme_bw() # Make it look good
grid.arrange(p1, p2)
t.test(bagsOfApples$weight, bagsOfOranges$weight)
sd(bagsOfApples$weight)
sd(log(bagsOfApples$weight))
mean(log(bagsOfApples$weight))
qplot(bagsOfApples$weight)
qplot(bagsOfApples$weight, binwidth=.3)
qplot(bagsOfApples$weight, binwidth=.25)
qplot(log(bagsOfApples$weight), binwidth=.25)
qplot(log(bagsOfApples$weight), binwidth=.2)
qplot(bagsOfApples$weight, binwidth=.2)
qplot(log(bagsOfApples$weight), binwidth=.2)
qplot(log(bagsOfApples$weight), binwidth=.25)
qplot(log(bagsOfApples$weight), binwidth=.25)
qplot(bagsOfApples$weight, binwidth=.25)
qplot(log(bagsOfApples$weight), binwidth=.25)
oesData<-read.csv("data/state_M2016_dl.csv")
View(oesData)
oesData<-oesData[oesData$STATE=='OH',]
oesData<-read.csv("data/state_M2016_dl.csv")
oesData<-oesData[oesData$ST=='OH',]
oesDataOH<-oesData[oesData$ST=='OH',]
View(oesDataOH)
oesDataOH<-oesDataOH[-1,]
aggregate(TOT_EMP~A_MEDIAN, oesDataOH)
aggregate(TOT_EMP~A_MEDIAN, oesDataOH, FUN=sum)
oesDataOH$TOT_EMP<-as.numeric(oesDataOH$TOT_EMP)
oesDataOH<-oesData[oesData$ST=='OH',]
oesDataOH<-oesDataOH[OCC_Group=="detailed"]
oesDataOH<-oesDataOH[oesDataOH$OCC_Group=="detailed"]
oesDataOH<-oesDataOH[oesDataOH$OCC_Group=="detailed",]
oesDataOH<-oesData[oesData$ST=='OH',]
oesDataOH<-oesDataOH[oesDataOH$OCC_Group=="detailed",]
oesDataOH<-oesData[oesData$ST=='OH',]
oesDataOH<-oesDataOH[oesDataOH$OCC_GROUP=="detailed",]
oesDataOH$TOT_EMP
as.numeric(paste(oesDataOH$TOT_EMP))
as.numeric(str.strip(paste(oesDataOH$TOT_EMP),",",""))
as.numeric(strsplit(paste(oesDataOH$TOT_EMP),",",""))
as.numeric(strtrim(paste(oesDataOH$TOT_EMP),",",""))
as.numeric(gsub(",","",paste(oesDataOH$TOT_EMP)))
oesDataOH$A_MEDIAN<-as.numeric(gsub(",","",paste(oesDataOH$A_MEDIAN)))
aggregate(TOT_EMP~A_MEDIAN, data=oesDataOH)
aggregate(TOT_EMP~A_MEDIAN, data=oesDataOH, sum)
oesDataOH$TOT_EMP<-as.numeric(gsub(",","",paste(oesDataOH$TOT_EMP)))
oesDataOH$A_MEDIAN<-as.numeric(gsub(",","",paste(oesDataOH$A_MEDIAN)))
aggregate(TOT_EMP~A_MEDIAN, data=oesDataOH, sum)
qplot(aggregate(TOT_EMP~A_MEDIAN, data=oesDataOH, sum))
qplot(data=aggregate(TOT_EMP~A_MEDIAN, data=oesDataOH, sum), x=A_MEDIAN, y=TOT_EMP)
qplot(data=oesDataOH, x=A_MEDIAN, y=TOT_EMP)
qplot(data=oesDataOH, x=A_MEDIAN, y=TOT_EMP, alpha=0.5)
qplot(data=aggregate(TOT_EMP~A_MEDIAN, data=oesDataOH, sum), x=A_MEDIAN, y=TOT_EMP, alpha=0.5)
qplot(data=aggregate(TOT_EMP~A_MEDIAN, data=oesDataOH, sum), x=A_MEDIAN, y=TOT_EMP, geom="bar")
ggplot(data=oesDataOH, aes(x=A_Median, y=TOT_EMP)) + stat_summary(fun.y="sum", geom="bar")
ggplot(data=oesDataOH, aes(x=A_MEDIAN, y=TOT_EMP)) + stat_summary(fun.y="sum", geom="bar")
ggplot(data=oesDataOH, aes(x=A_MEDIAN, y=TOT_EMP)) + stat_summary(fun.y="sum", geom="bar", binwidth=1000)
ggplot(data=oesDataOH, aes(x=A_MEDIAN, y=TOT_EMP)) + stat_summary(fun.y="sum", geom="bar", binwidth=10000)
ggplot(data=oesDataOH, aes(x=A_MEDIAN, y=TOT_EMP)) + geom_histogram()
ggplot(data=oesDataOH, aes(x=A_MEDIAN, y=TOT_EMP)) + geom_bar()
ggplot(data=oesDataOH, aes(x=A_Median, y=TOT_EMP)) + stat_summary(fun.y="sum")
ggplot(data=oesDataOH, aes(x=A_MEDIAN, y=TOT_EMP)) + stat_summary(fun.y="sum")
ggplot(data=oesDataOH, aes(x=A_MEDIAN, y=TOT_EMP))
ggplot(data=oesDataOH, aes(x=A_MEDIAN, y=TOT_EMP)) + geom_point()
ggplot(data=oesDataOH, aes(x=A_MEDIAN, y=TOT_EMP)) + geom_point(alpha=.5)
ggplot(data=oesDataOH, aes(x=A_MEDIAN, y=TOT_EMP)) + geom_point(alpha=.2)
ggplot(data=oesDataOH, aes(x=log(A_MEDIAN), y=TOT_EMP)) + geom_point(alpha=.2)
ggplot(data=oesDataOH, aes(x=(A_MEDIAN), y=TOT_EMP)) + geom_point(alpha=.2)
ggplot(data=oesDataOH, aes(x=log(A_MEDIAN), y=TOT_EMP)) + geom_point(alpha=.2)
zillow<-read.csv("http://files.zillowstatic.com/research/public/Zip/Zip_Zri_AllHomesPlusMultifamily_Sum
)
)
""
""
zillow<-read.csv("http://files.zillowstatic.com/research/public/Zip/Zip_Zri_AllHomesPlusMultifamily_Summary.csv")
View(zillow)
qplot(zillow$Zri)
qplot(log(zillow$Zri))
write.csv(row.names = F, zillow, file="data/zillow.csv")
zillow<-read.csv("data/zillow.csv")
qplot(zillow$Zri)
qplot(zillow$Zri, binwidth=1000)
qplot(zillow$Zri, binwidth=500)
max(zillow$Zri)
qplot(zillow$Zri)
qplot(zillow$Zri)
min(zillow$Zri)
zillow[zillow$Zri>15000,]
zillow[zillow$Zri>15000,]
zillow[zillow$Zri>15000,]
zillow[zillow$Zri>15000,]
log(500) # 500
log(1500)
log(15000) # $15000 is
library(ggplot2)
library(gridExtra)
?grid.arrange
p1<-qplot(zillow$Zri)
p2<-qplot(log(zillow$Zri))
grid.arrange(p1, p2, ncol=2)
head(zillow[,c("logZri", "Zri")])
zillow$logZri<-log(zillow$Zri) # Create a new column and store transformed values in this column.
head(zillow[,c("logZri", "Zri")])
p3<-qplot(sqrt(zillow$Zri))
grid.arrange(p1, p2, p3, ncol=3)
log(0)
log(-5)
sqrt(0)
sqrt(-5)
zillow$sqrtZri<-sqrt(zillow$Zri)
zillow
View(zillow)
qplot(zillow$MoM)
qplot(zillow$QoQ)
qplot(zillow$ZriRecordCnt)
qplot(1/zillow$Zri)
data(UCBAdmissions)
View(UCBAdmissions)
data(PASWR)
data(Grades)
data(SAT)
library(UsingR)
data(gpa)
data(sat.act)
library(psych)
data(sat.act)
View(sat.act)
data(sat.act)
?sat.act
library(psych)
qplot(sat.act$ACT)
qplot(sat.act$SATQ)
qplot(sat.act$ACT)
qplot(sat.act$ACT, binwidth=10)
qplot(sat.act$ACT, binwidth=5)
qplot(sat.act$ACT, binwidth=4)
qplot(sat.act$ACT, binwidth=2)
p2<-qplot((sat.act$ACT)^2)
p1<-qplot(sat.act$ACT)
grid.arrange(p1, p2, ncol=2)
qplot(sat.act$SATQ, binwidth=2)
qplot(sat.act$SATQ)
qplot(sat.act$SATQ, binwidth=10)
qplot(sat.act$SATQ, binwidth=25)
p1<-qplot(sat.act$SATQ)
p2<-qplot((sat.act$SATQ)^2)
grid.arrange(p1, p2, ncol=2)
sat.act$SATV2<-(sat.act)^2
rm(sat.avt)
rm(sat.act)
data(sat.act)
sat.act$SATV2<-(sat.act$SATV)^2
p1<-qplot(sat.act$SATQ)
p2<-qplot((sat.act$SATQ)^2)
options(scipen=99)
grid.arrange(p1, p2, ncol=2)
?scale
scale(zillow$Zri)
zillow$stdZri<-scale(zillow$Zri)
mean(zillow$stdZri)
sd(zillow$stdZri)
head(zillow[,c("Zri","stdZri")])
mean(zillow$Zri)
round(mean(zillow$Zri))
